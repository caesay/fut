// GenCCpp.ci - C/C++ code generator
//
// Copyright (C) 2011-2023  Piotr Fusik
//
// This file is part of CiTo, see https://github.com/pfusik/cito
//
// CiTo is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// CiTo is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with CiTo.  If not, see http://www.gnu.org/licenses/

public abstract class GenCCpp : GenCCppD
{
	protected abstract void IncludeStdInt!();

	protected abstract void IncludeAssert!();

	protected abstract void IncludeMath!();

	void WriteCIncludes!()
	{
		WriteIncludes("#include <", ">");
	}

	protected override int GetLiteralChars() => 127;

	protected virtual void WriteNumericType!(CiId id)
	{
		switch (id) {
		case CiId.SByteRange:
			IncludeStdInt();
			Write("int8_t");
			break;
		case CiId.ByteRange:
			IncludeStdInt();
			Write("uint8_t");
			break;
		case CiId.ShortRange:
			IncludeStdInt();
			Write("int16_t");
			break;
		case CiId.UShortRange:
			IncludeStdInt();
			Write("uint16_t");
			break;
		case CiId.IntType:
			Write("int");
			break;
		case CiId.LongType:
			IncludeStdInt();
			Write("int64_t");
			break;
		case CiId.FloatType:
			Write("float");
			break;
		case CiId.DoubleType:
			Write("double");
			break;
		default:
			assert false;
		}
	}

	public override void VisitSymbolReference!(CiSymbolReference expr, CiPriority parent)
	{
		switch (expr.Symbol.Id) {
		case CiId.MathNaN:
			IncludeMath();
			Write("NAN");
			break;
		case CiId.MathNegativeInfinity:
			IncludeMath();
			Write("-INFINITY");
			break;
		case CiId.MathPositiveInfinity:
			IncludeMath();
			Write("INFINITY");
			break;
		default:
			base.VisitSymbolReference(expr, parent);
			break;
		}
	}

	protected abstract void WriteEqualString!(CiExpr left, CiExpr right, CiPriority parent, bool not);

	static bool IsPtrTo(CiExpr ptr, CiExpr other) => ptr.Type is CiClassType klass && klass.Class.Id != CiId.StringClass && klass.IsAssignableFrom(other.Type);

	protected override void WriteEqual!(CiBinaryExpr expr, CiPriority parent, bool not)
	{
		CiType coercedType;
		if (IsPtrTo(expr.Left, expr.Right))
			coercedType = expr.Left.Type;
		else if (IsPtrTo(expr.Right, expr.Left))
			coercedType = expr.Right.Type;
		else {
			base.WriteEqual(expr, parent, not);
			return;
		}
		if (parent > CiPriority.Equality)
			WriteChar('(');
		WriteCoerced(coercedType, expr.Left, CiPriority.Equality);
		Write(GetEqOp(not));
		WriteCoerced(coercedType, expr.Right, CiPriority.Equality);
		if (parent > CiPriority.Equality)
			WriteChar(')');
	}

	protected static CiExpr? IsStringEmpty(CiBinaryExpr expr)
	{
		if (expr.Left is CiSymbolReference symbol && symbol.Symbol.Id == CiId.StringLength
			&& expr.Right.IsLiteralZero())
			return symbol.Left;
		return null;
	}

	protected abstract void WriteArrayPtr!(CiExpr expr, CiPriority parent);

	protected void WriteArrayPtrAdd!(CiExpr array, CiExpr index)
	{
		if (index.IsLiteralZero())
			WriteArrayPtr(array, CiPriority.Argument);
		else {
			WriteArrayPtr(array, CiPriority.Add);
			Write(" + ");
			index.Accept(this, CiPriority.Add);
		}
	}

	protected static CiCallExpr? IsStringSubstring(CiExpr expr)
	{
		if (expr is CiCallExpr call) {
			CiId id = call.Method.Symbol.Id;
			if ((id == CiId.StringSubstring && call.Arguments.Count == 2)
			 || id == CiId.UTF8GetString)
				return call;
		}
		return null;
	}

	protected static bool IsUTF8GetString(CiCallExpr call) => call.Method.Symbol.Id == CiId.UTF8GetString;

	protected static CiExpr GetStringSubstringPtr(CiCallExpr call) => IsUTF8GetString(call) ? call.Arguments[0] : call.Method.Left;

	protected static CiExpr GetStringSubstringOffset(CiCallExpr call) => call.Arguments[IsUTF8GetString(call) ? 1 : 0];

	protected static CiExpr GetStringSubstringLength(CiCallExpr call) => call.Arguments[IsUTF8GetString(call) ? 2 : 1];

	protected void WriteStringPtrAdd!(CiCallExpr call)
	{
		WriteArrayPtrAdd(GetStringSubstringPtr(call), GetStringSubstringOffset(call));
	}

	protected static CiExpr? IsTrimSubstring(CiBinaryExpr expr)
	{
		CiCallExpr? call = IsStringSubstring(expr.Right);
		if (call != null
		 && !IsUTF8GetString(call)
		 && expr.Left is CiSymbolReference leftSymbol && GetStringSubstringPtr(call).IsReferenceTo(leftSymbol.Symbol) // TODO: more complex expr
		 && GetStringSubstringOffset(call).IsLiteralZero())
			return GetStringSubstringLength(call);
		return null;
	}

	protected void WriteStringLiteralWithNewLine!(string s)
	{
		WriteChar('"');
		Write(s);
		Write("\\n\"");
	}

	protected virtual void WriteUnreachable!(CiAssert statement)
	{
		// TODO: C23, C++23: unreachable()
		Write("abort();");
		if (statement.Message != null) {
			Write(" // ");
			statement.Message.Accept(this, CiPriority.Argument);
		}
		WriteNewLine();
	}

	protected override void WriteAssert!(CiAssert statement)
	{
		if (statement.CompletesNormally()) {
			IncludeAssert();
			Write("assert(");
			if (statement.Message == null)
				statement.Cond.Accept(this, CiPriority.Argument);
			else {
				statement.Cond.Accept(this, CiPriority.CondAnd);
				Write(" && ");
				statement.Message.Accept(this, CiPriority.Argument);
			}
			WriteLine(");");
		}
		else
			WriteUnreachable(statement);
	}

	public override void VisitSwitch!(CiSwitch statement)
	{
		if (!(statement.Value.Type is CiStringType)) {
			base.VisitSwitch(statement);
			return;
		}

		int gotoId = GetSwitchGoto(statement);
		string op = "if (";
		foreach (CiCase kase in statement.Cases) {
			foreach (CiExpr caseValue in kase.Values) {
				Write(op);
				WriteEqualString(statement.Value, caseValue, kase.Values.Count == 1 ? CiPriority.Argument : CiPriority.CondOr, false); // FIXME: side effect
				op = " || ";
			}
			WriteChar(')');
			WriteIfCaseBody(kase.Body, gotoId < 0);
			op = "else if (";
		}
		EndSwitchAsIfs(statement, gotoId);
	}

	protected void WriteMethods!(CiClass klass)
	{
		for (CiSymbol? symbol = klass.First; symbol != null; symbol = symbol.Next) {
			if (symbol is CiMethod method) {
				WriteMethod(method);
				this.CurrentTemporaries.Clear();
			}
		}
	}

	protected abstract void WriteClassInternal!(CiClass klass);

	protected override void WriteClass!(CiClass klass, CiProgram program)
	{
		// topological sorting of class hierarchy and class storage fields
		if (!WriteBaseClass(klass, program))
			return;
		for (CiSymbol? symbol = klass.First; symbol != null; symbol = symbol.Next) {
			if (symbol is CiField field && field.Type.GetBaseType() is CiStorageType storage && storage.Class.Id == CiId.None)
				WriteClass(storage.Class, program);
		}
		WriteClassInternal(klass);
	}

	static string() ChangeExtension(string path, string ext)
	{
		int extIndex = path.Length;
		for (int i = extIndex; --i >= 0 && path[i] != '/' && path[i] != '\\'; ) {
			if (path[i] == '.') {
				extIndex = i;
				break;
			}
		}
		return path.Substring(0, extIndex) + ext;
	}

	protected void CreateHeaderFile!(string headerExt)
	{
		CreateFile(ChangeExtension(this.OutputFile, headerExt));
		WriteLine("#pragma once");
		WriteCIncludes();
	}

	static string() GetFilenameWithoutExtension(string path)
	{
		int pathLength = path.Length;
		int extIndex = pathLength;
		int i = pathLength;
		while (--i >= 0 && path[i] != '/' && path[i] != '\\') {
			if (path[i] == '.' && extIndex == pathLength)
				extIndex = i;
		}
		i++;
		return path.Substring(i, extIndex - i);
	}

	protected void CreateImplementationFile!(CiProgram program, string headerExt)
	{
		CreateFile(this.OutputFile);
		WriteTopLevelNatives(program);
		WriteCIncludes();
		Write("#include \"");
		Write(GetFilenameWithoutExtension(this.OutputFile));
		Write(headerExt);
		WriteCharLine('"');
	}
}
