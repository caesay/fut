// GenTyped.ci - C/C++/C#/D/Java code generator
//
// Copyright (C) 2011-2023  Piotr Fusik
//
// This file is part of CiTo, see https://github.com/pfusik/cito
//
// CiTo is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// CiTo is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with CiTo.  If not, see http://www.gnu.org/licenses/

public abstract class GenTyped : GenBase
{
	protected abstract void WriteType!(CiType type, bool promote);

	protected override void WriteCoercedLiteral!(CiType? type, CiExpr expr)
	{
		expr.Accept(this, CiPriority.Argument);
		if (type != null && type.Id == CiId.FloatType && expr is CiLiteralDouble)
			WriteChar('f');
	}

	protected override void WriteTypeAndName!(CiNamedValue value)
	{
		WriteType(value.Type, true);
		WriteChar(' ');
		WriteName(value);
	}

	public override void VisitAggregateInitializer!(CiAggregateInitializer expr)
	{
		Write("{ ");
		WriteCoercedLiterals(expr.Type.AsClassType().GetElementType(), expr.Items);
		Write(" }");
	}

	protected void WriteArrayStorageLength!(CiExpr expr)
	{
		assert expr.Type is CiArrayStorageType array;
		VisitLiteralLong(array.Length);
	}

	protected override void WriteNewArray!(CiType elementType, CiExpr lengthExpr, CiPriority parent)
	{
		Write("new ");
		WriteType(elementType.GetBaseType(), false);
		WriteChar('[');
		lengthExpr.Accept(this, CiPriority.Argument);
		WriteChar(']');
		while (elementType.IsArray()) {
			WriteChar('[');
			if (elementType is CiArrayStorageType arrayStorage)
				arrayStorage.LengthExpr.Accept(this, CiPriority.Argument);
			WriteChar(']');
			elementType = elementType.AsClassType().GetElementType();
		}
	}

	protected int GetOneAscii(CiExpr expr) => expr is CiLiteralString literal ? literal.GetOneAscii() : -1;

	protected static bool IsNarrower(CiId left, CiId right)
	{
		switch (left) {
		case CiId.SByteRange:
			switch (right) {
			case CiId.ByteRange:
			case CiId.ShortRange:
			case CiId.UShortRange:
			case CiId.IntType:
			case CiId.LongType:
				return true;
			default:
				return false;
			}
		case CiId.ByteRange:
			switch (right) {
			case CiId.SByteRange:
			case CiId.ShortRange:
			case CiId.UShortRange:
			case CiId.IntType:
			case CiId.LongType:
				return true;
			default:
				return false;
			}
		case CiId.ShortRange:
			switch (right) {
			case CiId.UShortRange:
			case CiId.IntType:
			case CiId.LongType:
				return true;
			default:
				return false;
			}
		case CiId.UShortRange:
			switch (right) {
			case CiId.ShortRange:
			case CiId.IntType:
			case CiId.LongType:
				return true;
			default:
				return false;
			}
		case CiId.IntType:
			return right == CiId.LongType;
		default:
			return false;
		}
	}

	protected CiExpr GetStaticCastInner(CiType type, CiExpr expr)
	{
		if (expr is CiBinaryExpr binary && binary.Op == CiToken.And && binary.Right is CiLiteralLong rightMask
		 && type is CiIntegerType) {
			long mask;
			switch (type.Id) {
			case CiId.ByteRange:
			case CiId.SByteRange:
				mask = 0xff;
				break;
			case CiId.ShortRange:
			case CiId.UShortRange:
				mask = 0xffff;
				break;
			case CiId.IntType:
				mask = 0xffffffff;
				break;
			default:
				return expr;
			}
			if ((rightMask.Value & mask) == mask)
				return binary.Left;
		}
		return expr;
	}

	protected void WriteStaticCastType!(CiType type)
	{
		WriteChar('(');
		WriteType(type, false);
		Write(") ");
	}

	protected virtual void WriteStaticCast!(CiType type, CiExpr expr)
	{
		WriteStaticCastType(type);
		GetStaticCastInner(type, expr).Accept(this, CiPriority.Primary);
	}

	protected override void WriteNotPromoted!(CiType type, CiExpr expr)
	{
		if (type is CiIntegerType
		 && IsNarrower(type.Id, GetTypeId(expr.Type, true)))
			WriteStaticCast(type, expr);
		else
			WriteCoercedLiteral(type, expr);
	}

	protected virtual bool IsPromoted(CiExpr expr) => !(expr is CiBinaryExpr binary && (binary.Op == CiToken.LeftBracket || binary.IsAssign()));

	protected override void WriteAssignRight!(CiBinaryExpr expr)
	{
		if (expr.Left.IsIndexing()) {
			if (expr.Right is CiLiteralLong) {
				WriteCoercedLiteral(expr.Left.Type, expr.Right);
				return;
			}
			CiId leftTypeId = expr.Left.Type.Id;
			CiId rightTypeId = GetTypeId(expr.Right.Type, IsPromoted(expr.Right));
			if (leftTypeId == CiId.SByteRange && rightTypeId == CiId.SByteRange) {
				expr.Right.Accept(this, CiPriority.Assign); // omit Java "& 0xff"
				return;
			}
			if (IsNarrower(leftTypeId, rightTypeId)) {
				WriteStaticCast(expr.Left.Type, expr.Right);
				return;
			}
		}
		base.WriteAssignRight(expr);
	}

	protected override void WriteCoercedInternal!(CiType type, CiExpr expr, CiPriority parent)
	{
		if (type is CiIntegerType && type.Id != CiId.LongType && expr.Type.Id == CiId.LongType)
			WriteStaticCast(type, expr);
		else if (type.Id == CiId.FloatType && expr.Type.Id == CiId.DoubleType) {
			if (expr is CiLiteralDouble literal) {
				VisitLiteralDouble(literal.Value);
				WriteChar('f');
			}
			else
				WriteStaticCast(type, expr);
		}
		else if (type is CiIntegerType && expr.Type.Id == CiId.FloatIntType) {
			if (expr is CiCallExpr call && call.Method.Symbol.Id == CiId.MathTruncate) {
				expr = call.Arguments[0];
				if (expr is CiLiteralDouble literal) {
					VisitLiteralLong(Math.Truncate(literal.Value)); // TODO: range check
					return;
				}
			}
			WriteStaticCast(type, expr);
		}
		else
			base.WriteCoercedInternal(type, expr, parent);
	}

	protected override void WriteCharAt!(CiBinaryExpr expr)
	{
		WriteIndexing(expr.Left, expr.Right);
	}

	protected override void StartTemporaryVar!(CiType type)
	{
		WriteType(type, true);
		WriteChar(' ');
	}

	protected override void WriteAssertCast!(CiBinaryExpr expr)
	{
		assert expr.Right is CiVar def;
		WriteTypeAndName(def);
		Write(" = ");
		WriteStaticCast(def.Type, expr.Left);
		WriteCharLine(';');
	}
}
