// GenJava.ci - Java code generator
//
// Copyright (C) 2011-2023  Piotr Fusik
//
// This file is part of CiTo, see https://github.com/pfusik/cito
//
// CiTo is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// CiTo is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with CiTo.  If not, see http://www.gnu.org/licenses/

public class GenJava : GenTyped
{
	int SwitchCaseDiscards;

	protected override string GetTargetName() => "Java";

	public override void VisitLiteralLong!(long value)
	{
		base.VisitLiteralLong(value);
		if (value < int.MinValue || value > int.MaxValue)
			WriteChar('L');
	}

	protected override int GetLiteralChars() => 0x10000;

	void WriteToString!(CiExpr expr, CiPriority parent)
	{
		switch (expr.Type.Id) {
		case CiId.LongType:
			Write("Long");
			break;
		case CiId.FloatType:
			Write("Float");
			break;
		case CiId.DoubleType:
		case CiId.FloatIntType:
			Write("Double");
			break;
		case CiId.StringPtrType:
		case CiId.StringStorageType:
			expr.Accept(this, parent);
			return;
		default:
			if (expr.Type is CiIntegerType)
				Write("Integer");
			else if (expr.Type is CiClassType) {
				WritePostfix(expr, ".toString()");
				return;
			}
			else
				assert false;
			break;
		}
		WriteCall(".toString", expr);
	}

	protected override void WritePrintfWidth!(CiInterpolatedPart part)
	{
		if (part.Precision >= 0 && part.Argument.Type is CiIntegerType) {
			WriteChar('0');
			VisitLiteralLong(part.Precision);
		}
		else
			base.WritePrintfWidth(part);
	}

	public override void VisitInterpolatedString!(CiInterpolatedString expr, CiPriority parent)
	{
		if (expr.Suffix.Length == 0
		 && expr.Parts.Count == 1
		 && expr.Parts[0].Prefix.Length == 0
		 && expr.Parts[0].WidthExpr == null
		 && expr.Parts[0].Format == ' ')
			WriteToString(expr.Parts[0].Argument, parent);
		else {
			Write("String.format(");
			WritePrintf(expr, false);
		}
	}

	void WriteCamelCaseNotKeyword!(string name)
	{
		WriteCamelCase(name);
		switch (name) {
		case "Abstract":
		case "Assert":
		case "Boolean":
		case "Break":
		case "Byte":
		case "Case":
		case "Catch":
		case "Char":
		case "Class":
		case "Const":
		case "Continue":
		case "Default":
		case "Do":
		case "Double":
		case "Else":
		case "Enum":
		case "Extends":
		case "False":
		case "Final":
		case "Finally":
		case "Float":
		case "For":
		case "Foreach":
		case "Goto":
		case "If":
		case "Implements":
		case "Import":
		case "Instanceof":
		case "Int":
		case "Interface":
		case "Long":
		case "Native":
		case "New":
		case "Null":
		case "Package":
		case "Private":
		case "Protected":
		case "Public":
		case "Return":
		case "Short":
		case "Static":
		case "Strictfp":
		case "String":
		case "Super":
		case "Switch":
		case "Synchronized":
		case "Transient":
		case "Throw":
		case "Throws":
		case "True":
		case "Try":
		case "Void":
		case "Volatile":
		case "While":
		case "Yield":
		case "boolean":
		case "catch":
		case "char":
		case "extends":
		case "final":
		case "finally":
		case "goto":
		case "implements":
		case "import":
		case "instanceof":
		case "interface":
		case "package":
		case "private":
		case "strictfp":
		case "super":
		case "synchronized":
		case "transient":
		case "try":
		case "volatile":
		case "yield":
			WriteChar('_');
			break;
		default:
			break;
		}
	}

	protected override void WriteName!(CiSymbol symbol)
	{
		switch (symbol) {
		case CiContainerType _:
			Write(symbol.Name);
			break;
		case CiConst konst:
			if (konst.InMethod != null) {
				WriteUppercaseWithUnderscores(konst.InMethod.Name);
				WriteChar('_');
			}
			WriteUppercaseWithUnderscores(symbol.Name);
			break;
		case CiVar _:
			if (symbol.Parent is CiForeach forEach && forEach.Count() == 2) {
				CiVar element = forEach.GetVar();
				WriteCamelCaseNotKeyword(element.Name);
				Write(symbol == element ? ".getKey()" : ".getValue()");
			}
			else
				WriteCamelCaseNotKeyword(symbol.Name);
			break;
		case CiMember _:
			WriteCamelCaseNotKeyword(symbol.Name);
			break;
		default:
			assert false;
		}
	}

	void WriteVisibility!(CiVisibility visibility)
	{
		switch (visibility) {
		case CiVisibility.Private:
			Write("private ");
			break;
		case CiVisibility.Internal:
			break;
		case CiVisibility.Protected:
			Write("protected ");
			break;
		case CiVisibility.Public:
			Write("public ");
			break;
		default:
			assert false;
		}
	}

	protected override CiId GetTypeId(CiType type, bool promote)
	{
		CiId id = base.GetTypeId(type, promote);
		switch (id) {
		case CiId.ByteRange:
			return CiId.SByteRange; // store unsigned bytes in Java signed bytes
		case CiId.UShortRange:
			return CiId.IntType;
		default:
			return id;
		}
	}

	void WriteCollectionType!(string name, CiType elementType)
	{
		Include("java.util." + name);
		Write(name);
		WriteChar('<');
		WriteJavaType(elementType, false, true);
		WriteChar('>');
	}

	void WriteDictType!(string name, CiClassType dict)
	{
		Write(name);
		WriteChar('<');
		WriteJavaType(dict.GetKeyType(), false, true);
		Write(", ");
		WriteJavaType(dict.GetValueType(), false, true);
		WriteChar('>');
	}

	void WriteJavaType!(CiType type, bool promote, bool needClass)
	{
		switch (type) {
		case CiNumericType _:
			switch (GetTypeId(type, promote)) {
			case CiId.SByteRange:
				Write(needClass ? "Byte" : "byte");
				break;
			case CiId.ShortRange:
				Write(needClass ? "Short" : "short");
				break;
			case CiId.IntType:
				Write(needClass ? "Integer" : "int");
				break;
			case CiId.LongType:
				Write(needClass ? "Long" : "long");
				break;
			case CiId.FloatType:
				Write(needClass ? "Float" : "float");
				break;
			case CiId.DoubleType:
				Write(needClass ? "Double" : "double");
				break;
			default:
				assert false;
			}
			break;
		case CiEnum enu:
			Write(enu.Id == CiId.BoolType
				? needClass ? "Boolean" : "boolean"
				: needClass ? "Integer" : "int");
			break;
 		case CiClassType klass:
			switch (klass.Class.Id) {
			case CiId.StringClass:
				Write("String");
				break;
			case CiId.ArrayPtrClass:
			case CiId.ArrayStorageClass:
				WriteType(klass.GetElementType(), false);
				Write("[]");
				break;
			case CiId.ListClass:
				WriteCollectionType("ArrayList", klass.GetElementType());
				break;
			case CiId.QueueClass:
				WriteCollectionType("ArrayDeque", klass.GetElementType());
				break;
			case CiId.StackClass:
				WriteCollectionType("Stack", klass.GetElementType());
				break;
			case CiId.HashSetClass:
				WriteCollectionType("HashSet", klass.GetElementType());
				break;
			case CiId.SortedSetClass:
				WriteCollectionType("TreeSet", klass.GetElementType());
				break;
			case CiId.DictionaryClass:
				Include("java.util.HashMap");
				WriteDictType("HashMap", klass);
				break;
			case CiId.SortedDictionaryClass:
				Include("java.util.TreeMap");
				WriteDictType("TreeMap", klass);
				break;
			case CiId.OrderedDictionaryClass:
				Include("java.util.LinkedHashMap");
				WriteDictType("LinkedHashMap", klass);
				break;
			case CiId.TextWriterClass:
				Write("Appendable");
				break;
			case CiId.RegexClass:
				Include("java.util.regex.Pattern");
				Write("Pattern");
				break;
			case CiId.MatchClass:
				Include("java.util.regex.Matcher");
				Write("Matcher");
				break;
			case CiId.LockClass:
				Write("Object");
				break;
			default:
				Write(klass.Class.Name);
				break;
			}
			break;
		default:
			Write(type.Name);
			break;
		}
	}

	protected override void WriteType!(CiType type, bool promote)
	{
		WriteJavaType(type, promote, false);
	}

	protected override void WriteNew!(CiReadWriteClassType klass, CiPriority parent)
	{
		Write("new ");
		WriteType(klass, false);
		Write("()");
	}

	protected override void WriteResource!(string name, int length)
	{
		Write("CiResource.getByteArray(");
		VisitLiteralString(name);
		Write(", ");
		VisitLiteralLong(length);
		WriteChar(')');
	}

	static bool IsUnsignedByte(CiType type) => type.Id == CiId.ByteRange && type is CiRangeType range && range.Max > 127;

	static bool IsUnsignedByteIndexing(CiExpr expr) => expr.IsIndexing() && IsUnsignedByte(expr.Type);

	void WriteIndexingInternal!(CiBinaryExpr expr)
	{
		if (expr.Left.Type.IsArray())
			base.WriteIndexingExpr(expr, CiPriority.And /* don't care */);
		else
			WriteMethodCall(expr.Left, "get", expr.Right);
	}

	public override void VisitPrefixExpr!(CiPrefixExpr expr, CiPriority parent)
	{
		if ((expr.Op == CiToken.Increment || expr.Op == CiToken.Decrement)
		 && IsUnsignedByteIndexing(expr.Inner)) {
			if (parent > CiPriority.And)
				WriteChar('(');
			Write(expr.Op == CiToken.Increment ? "++" : "--");
			assert expr.Inner is CiBinaryExpr indexing;
			WriteIndexingInternal(indexing);
			if (parent != CiPriority.Statement)
				Write(" & 0xff");
			if (parent > CiPriority.And)
				WriteChar(')');
		}
		else
			base.VisitPrefixExpr(expr, parent);
	}

	public override void VisitPostfixExpr!(CiPostfixExpr expr, CiPriority parent)
	{
		if ((expr.Op == CiToken.Increment || expr.Op == CiToken.Decrement)
		 && IsUnsignedByteIndexing(expr.Inner)) {
			if (parent > CiPriority.And)
				WriteChar('(');
			assert expr.Inner is CiBinaryExpr indexing;
			WriteIndexingInternal(indexing);
			Write(expr.Op == CiToken.Increment ? "++" : "--");
			if (parent != CiPriority.Statement)
				Write(" & 0xff");
			if (parent > CiPriority.And)
				WriteChar(')');
		}
		else
			base.VisitPostfixExpr(expr, parent);
	}

	void WriteSByteLiteral!(CiLiteralLong literal)
	{
		VisitLiteralLong((literal.Value ^ 0x80) - 0x80);
	}

	protected override void WriteEqual!(CiExpr left, CiExpr right, CiPriority parent, bool not)
	{
		if ((left.Type is CiStringType && right.Type.Id != CiId.NullType)
		 || (right.Type is CiStringType && left.Type.Id != CiId.NullType)) {
			if (not)
				WriteChar('!');
			WriteMethodCall(left, "equals", right);
		}
		else if (IsUnsignedByteIndexing(left)
			&& right is CiLiteralLong rightLiteral && rightLiteral.Type.Id == CiId.ByteRange) {
			if (parent > CiPriority.Equality)
				WriteChar('(');
			assert left is CiBinaryExpr indexing;
			WriteIndexingInternal(indexing); // omit "& 0xff"
			Write(GetEqOp(not));
			WriteSByteLiteral(rightLiteral);
			if (parent > CiPriority.Equality)
				WriteChar(')');
		}
		else
			base.WriteEqual(left, right, parent, not);
	}

	protected override void WriteCoercedLiteral!(CiType? type, CiExpr expr)
	{
		if (IsUnsignedByte(type)) {
			assert expr is CiLiteralLong literal;
			WriteSByteLiteral(literal);
		}
		else
			base.WriteCoercedLiteral(type, expr);
	}

	protected override void WriteAnd!(CiBinaryExpr expr, CiPriority parent)
	{
		if (IsUnsignedByteIndexing(expr.Left)
		 && expr.Right is CiLiteralLong rightLiteral) {
			if (parent > CiPriority.CondAnd && parent != CiPriority.And)
				WriteChar('(');
			assert expr.Left is CiBinaryExpr indexing;
			WriteIndexingInternal(indexing); // omit "& 0xff"
			Write(" & ");
			VisitLiteralLong(0xff & rightLiteral.Value);
			if (parent > CiPriority.CondAnd && parent != CiPriority.And)
				WriteChar(')');
		}
		else
			base.WriteAnd(expr, parent);
	}

	protected override void WriteStringLength!(CiExpr expr)
	{
		WritePostfix(expr, ".length()");
	}

	protected override void WriteCharAt!(CiBinaryExpr expr)
	{
		WriteMethodCall(expr.Left, "charAt", expr.Right);
	}

	public override void VisitSymbolReference!(CiSymbolReference expr, CiPriority parent)
	{
		switch (expr.Symbol.Id) {
		case CiId.ConsoleError:
			Write("System.err");
			break;
		case CiId.ListCount:
		case CiId.QueueCount:
		case CiId.StackCount:
		case CiId.HashSetCount:
		case CiId.SortedSetCount:
		case CiId.DictionaryCount:
		case CiId.SortedDictionaryCount:
		case CiId.OrderedDictionaryCount:
			expr.Left.Accept(this, CiPriority.Primary);
			WriteMemberOp(expr.Left, expr);
			Write("size()");
			break;
		case CiId.MathNaN:
			Write("Float.NaN");
			break;
		case CiId.MathNegativeInfinity:
			Write("Float.NEGATIVE_INFINITY");
			break;
		case CiId.MathPositiveInfinity:
			Write("Float.POSITIVE_INFINITY");
			break;
		default:
			if (!WriteJavaMatchProperty(expr, parent))
				base.VisitSymbolReference(expr, parent);
			break;
		}
	}

	void WriteArrayBinarySearchFill!(CiExpr obj, string method, List<CiExpr#> args)
	{
		Include("java.util.Arrays");
		Write("Arrays.");
		Write(method);
		WriteChar('(');
		obj.Accept(this, CiPriority.Argument);
		Write(", ");
		if (args.Count == 3) {
			WriteStartEnd(args[1], args[2]);
			Write(", ");
		}
		WriteNotPromoted(obj.Type.AsClassType().GetElementType(), args[0]);
		WriteChar(')');
	}

	void WriteWrite!(CiMethod method, List<CiExpr#> args, bool newLine)
	{
		if (args.Count == 1 && args[0] is CiInterpolatedString interpolated) {
			Write(".format(");
			WritePrintf(interpolated, newLine);
		}
		else {
			Write(".print");
			if (newLine)
				Write("ln");
			WriteArgsInParentheses(method, args);
		}
	}

	void WriteCompileRegex!(List<CiExpr#> args, int argIndex)
	{
		Include("java.util.regex.Pattern");
		Write("Pattern.compile(");
		args[argIndex].Accept(this, CiPriority.Argument);
		WriteRegexOptions(args, ", ", " | ", "", "Pattern.CASE_INSENSITIVE", "Pattern.MULTILINE", "Pattern.DOTALL");
		WriteChar(')');
	}

	protected override void WriteCallExpr!(CiExpr? obj, CiMethod method, List<CiExpr#> args, CiPriority parent)
	{
		switch (method.Id) {
		case CiId.None:
		case CiId.ClassToString:
		case CiId.StringContains:
		case CiId.StringEndsWith:
		case CiId.StringIndexOf:
		case CiId.StringLastIndexOf:
		case CiId.StringReplace:
		case CiId.StringStartsWith:
		case CiId.ListClear:
		case CiId.ListContains:
		case CiId.ListIndexOf:
		case CiId.QueueClear:
		case CiId.StackClear:
		case CiId.StackPeek:
		case CiId.StackPush:
		case CiId.StackPop:
		case CiId.HashSetAdd:
		case CiId.HashSetClear:
		case CiId.HashSetContains:
		case CiId.HashSetRemove:
		case CiId.SortedSetAdd:
		case CiId.SortedSetClear:
		case CiId.SortedSetContains:
		case CiId.SortedSetRemove:
		case CiId.DictionaryClear:
		case CiId.DictionaryContainsKey:
		case CiId.DictionaryRemove:
		case CiId.SortedDictionaryClear:
		case CiId.SortedDictionaryContainsKey:
		case CiId.SortedDictionaryRemove:
		case CiId.OrderedDictionaryClear:
		case CiId.OrderedDictionaryContainsKey:
		case CiId.OrderedDictionaryRemove:
		case CiId.StringWriterToString:
		case CiId.MathMethod:
		case CiId.MathAbs:
		case CiId.MathMaxInt:
		case CiId.MathMaxDouble:
		case CiId.MathMinInt:
		case CiId.MathMinDouble:
			if (obj != null) {
				if (IsReferenceTo(obj, CiId.BasePtr))
					Write("super");
				else
					obj.Accept(this, CiPriority.Primary);
				WriteChar('.');
			}
			WriteName(method);
			WriteArgsInParentheses(method, args);
			break;
		case CiId.EnumFromInt:
			args[0].Accept(this, parent);
			break;
		case CiId.EnumHasFlag:
			WriteEnumHasFlag(obj, args, parent);
			break;
		case CiId.DoubleTryParse:
			Include("java.util.function.DoubleSupplier");
			Write("!Double.isNaN(");
			obj.Accept(this, CiPriority.Assign);
			Write(" = ((DoubleSupplier) () -> { try { return Double.parseDouble(");
			args[0].Accept(this, CiPriority.Argument);
			Write("); } catch (NumberFormatException e) { return Double.NaN; } }).getAsDouble())");
			break;
		case CiId.StringSubstring:
			WritePostfix(obj, ".substring(");
			args[0].Accept(this, CiPriority.Argument);
			if (args.Count == 2) {
				Write(", ");
				WriteAdd(args[0], args[1]); // FIXME: side effect
			}
			WriteChar(')');
			break;
		case CiId.ArrayBinarySearchAll:
		case CiId.ArrayBinarySearchPart:
			WriteArrayBinarySearchFill(obj, "binarySearch", args);
			break;
		case CiId.ArrayCopyTo:
			Write("System.arraycopy(");
			obj.Accept(this, CiPriority.Argument);
			Write(", ");
			WriteArgs(method, args);
			WriteChar(')');
			break;
		case CiId.ArrayFillAll:
		case CiId.ArrayFillPart:
			WriteArrayBinarySearchFill(obj, "fill", args);
			break;
		case CiId.ArraySortAll:
			Include("java.util.Arrays");
			WriteCall("Arrays.sort", obj);
			break;
		case CiId.ArraySortPart:
			Include("java.util.Arrays");
			Write("Arrays.sort(");
			obj.Accept(this, CiPriority.Argument);
			Write(", ");
			WriteStartEnd(args[0], args[1]);
			WriteChar(')');
			break;
		case CiId.ListAdd:
			WriteListAdd(obj, "add", args);
			break;
		case CiId.ListAddRange:
			WriteMethodCall(obj, "addAll", args[0]);
			break;
		case CiId.ListAll:
			WriteMethodCall(obj, "stream().allMatch", args[0]);
			break;
		case CiId.ListAny:
			WriteMethodCall(obj, "stream().anyMatch", args[0]);
			break;
		case CiId.ListCopyTo:
			Write("for (int _i = 0; _i < ");
			args[3].Accept(this, CiPriority.Rel); // FIXME: side effect in every iteration
			WriteLine("; _i++)");
			Write("\t");
			args[1].Accept(this, CiPriority.Primary); // FIXME: side effect in every iteration
			WriteChar('[');
			StartAdd(args[2]); // FIXME: side effect in every iteration
			Write("_i] = ");
			WritePostfix(obj, ".get("); // FIXME: side effect in every iteration
			StartAdd(args[0]); // FIXME: side effect in every iteration
			Write("_i)");
			break;
		case CiId.ListInsert:
			WriteListInsert(obj, "add", args);
			break;
		case CiId.ListLast:
			WritePostfix(obj, ".get(");
			WritePostfix(obj, ".size() - 1)"); // FIXME: side effect
			break;
		case CiId.ListRemoveAt:
			WriteMethodCall(obj, "remove", args[0]);
			break;
		case CiId.ListRemoveRange:
			WritePostfix(obj, ".subList(");
			WriteStartEnd(args[0], args[1]);
			Write(").clear()");
			break;
		case CiId.ListSortAll:
			WritePostfix(obj, ".sort(null)");
			break;
		case CiId.ListSortPart:
			WritePostfix(obj, ".subList(");
			WriteStartEnd(args[0], args[1]);
			Write(").sort(null)");
			break;
		case CiId.QueueDequeue:
			WritePostfix(obj, ".remove()");
			break;
		case CiId.QueueEnqueue:
			WriteMethodCall(obj, "add", args[0]);
			break;
		case CiId.QueuePeek:
			WritePostfix(obj, ".element()");
			break;
		case CiId.DictionaryAdd:
			WritePostfix(obj, ".put(");
			args[0].Accept(this, CiPriority.Argument);
			Write(", ");
			WriteNewStorage(obj.Type.AsClassType().GetValueType());
			WriteChar(')');
			break;
		case CiId.TextWriterWrite:
			Write("try { ");
			WritePostfix(obj, ".append(");
			WriteToString(args[0], CiPriority.Argument);
			Include("java.io.IOException");
			Write("); } catch (IOException e) { throw new RuntimeException(e); }");
			break;
		case CiId.TextWriterWriteChar:
			Write("try { ");
			WritePostfix(obj, ".append(");
			if (!(args[0] is CiLiteralChar))
				Write("(char) ");
			args[0].Accept(this, CiPriority.Primary);
			Include("java.io.IOException");
			Write("); } catch (IOException e) { throw new RuntimeException(e); }");
			break;
		case CiId.TextWriterWriteCodePoint:
			Write("try { ");
			WriteMethodCall(obj, "append(Character.toString", args[0]);
			Include("java.io.IOException");
			Write("); } catch (IOException e) { throw new RuntimeException(e); }");
			break;
		case CiId.TextWriterWriteLine:
			Write("try { ");
			WritePostfix(obj, ".append(");
			if (args.Count == 0)
				Write("'\\n'");
			else if (args[0] is CiInterpolatedString interpolated) {
				Write("String.format(");
				WritePrintf(interpolated, true);
			}
			else {
				WriteToString(args[0], CiPriority.Argument);
				Write(").append('\\n'");
			}
			Include("java.io.IOException");
			Write("); } catch (IOException e) { throw new RuntimeException(e); }");
			break;
		case CiId.StringWriterClear:
			WritePostfix(obj, ".getBuffer().setLength(0)");
			break;
		case CiId.ConsoleWrite:
			Write("System.out");
			WriteWrite(method, args, false);
			break;
		case CiId.ConsoleWriteLine:
			Write("System.out");
			WriteWrite(method, args, true);
			break;
		case CiId.UTF8GetByteCount:
			Include("java.nio.charset.StandardCharsets");
			WritePostfix(args[0], ".getBytes(StandardCharsets.UTF_8).length"); // FIXME: quick&dirty!
			break;
		case CiId.UTF8GetBytes:
			Include("java.nio.ByteBuffer");
			Include("java.nio.CharBuffer");
			Include("java.nio.charset.StandardCharsets");
			Write("StandardCharsets.UTF_8.newEncoder().encode(CharBuffer.wrap(");
			args[0].Accept(this, CiPriority.Argument);
			Write("), ByteBuffer.wrap(");
			args[1].Accept(this, CiPriority.Argument);
			Write(", ");
			args[2].Accept(this, CiPriority.Argument);
			Write(", ");
			WritePostfix(args[1], ".length"); // FIXME: side effect
			if (!args[2].IsLiteralZero()) {
				Write(" - ");
				args[2].Accept(this, CiPriority.Mul); // FIXME: side effect
			}
			Write("), true)");
			break;
		case CiId.UTF8GetString:
			Include("java.nio.charset.StandardCharsets");
			Write("new String(");
			WriteArgs(method, args);
			Write(", StandardCharsets.UTF_8)");
			break;
		case CiId.EnvironmentGetEnvironmentVariable:
			WriteCall("System.getenv", args[0]);
			break;
		case CiId.RegexCompile:
			WriteCompileRegex(args, 0);
			break;
		case CiId.RegexEscape:
			Include("java.util.regex.Pattern");
			WriteCall("Pattern.quote", args[0]);
			break;
		case CiId.RegexIsMatchStr:
			WriteCompileRegex(args, 1);
			WriteCall(".matcher", args[0]);
			Write(".find()");
			break;
		case CiId.RegexIsMatchRegex:
			WriteMethodCall(obj, "matcher", args[0]);
			Write(".find()");
			break;
		case CiId.MatchFindStr:
		case CiId.MatchFindRegex:
			WriteChar('(');
			obj.Accept(this, CiPriority.Assign);
			Write(" = ");
			if (method.Id == CiId.MatchFindStr)
				WriteCompileRegex(args, 1);
			else
				args[1].Accept(this, CiPriority.Primary);
			WriteCall(".matcher", args[0]);
			Write(").find()");
			break;
		case CiId.MatchGetCapture:
			WriteMethodCall(obj, "group", args[0]);
			break;
		case CiId.MathCeiling:
			WriteCall("Math.ceil", args[0]);
			break;
		case CiId.MathClamp:
			Write("Math.min(Math.max(");
			WriteClampAsMinMax(args);
			break;
		case CiId.MathFusedMultiplyAdd:
			WriteCall("Math.fma", args[0], args[1], args[2]);
			break;
		case CiId.MathIsFinite:
			WriteCall("Double.isFinite", args[0]);
			break;
		case CiId.MathIsInfinity:
			WriteCall("Double.isInfinite", args[0]);
			break;
		case CiId.MathIsNaN:
			WriteCall("Double.isNaN", args[0]);
			break;
		case CiId.MathLog2:
			if (parent > CiPriority.Mul)
				WriteChar('(');
			WriteCall("Math.log", args[0]);
			Write(" * 1.4426950408889635");
			if (parent > CiPriority.Mul)
				WriteChar(')');
			break;
		case CiId.MathRound:
			WriteCall("Math.rint", args[0]);
			break;
		default:
			NotSupported(obj, method.Name);
			break;
		}
	}

	protected override void WriteIndexingExpr!(CiBinaryExpr expr, CiPriority parent)
	{
		if (parent != CiPriority.Assign && IsUnsignedByte(expr.Type)) {
			if (parent > CiPriority.And)
				WriteChar('(');
			WriteIndexingInternal(expr);
			Write(" & 0xff");
			if (parent > CiPriority.And)
				WriteChar(')');
		}
		else
			WriteIndexingInternal(expr);
	}

	protected override bool IsPromoted(CiExpr expr) => base.IsPromoted(expr) || IsUnsignedByteIndexing(expr);

	protected override void WriteAssignRight!(CiBinaryExpr expr)
	{
		if (!IsUnsignedByteIndexing(expr.Left)
		 && expr.Right is CiBinaryExpr rightBinary && rightBinary.IsAssign() && IsUnsignedByte(expr.Right.Type)) {
			WriteChar('(');
			base.WriteAssignRight(expr);
			Write(") & 0xff");
		}
		else
			base.WriteAssignRight(expr);
	}

	protected override void WriteAssign!(CiBinaryExpr expr, CiPriority parent)
	{
		if (expr.Left is CiBinaryExpr indexing
		 && indexing.Op == CiToken.LeftBracket
		 && indexing.Left.Type is CiClassType klass
		 && !klass.IsArray()) {
			WritePostfix(indexing.Left, klass.Class.Id == CiId.ListClass ? ".set(" : ".put(");
			indexing.Right.Accept(this, CiPriority.Argument);
			Write(", ");
			WriteNotPromoted(expr.Type, expr.Right);
			WriteChar(')');
		}
		else
			base.WriteAssign(expr, parent);
	}

	protected override string GetIsOperator() => " instanceof ";

	protected override void WriteVar!(CiNamedValue def)
	{
		if (def.Type.IsFinal() && !def.IsAssignableStorage())
			Write("final ");
		base.WriteVar(def);
	}

	protected override bool HasInitCode(CiNamedValue def) => (def.Type is CiArrayStorageType && def.Type.GetStorageType() is CiStorageType) || base.HasInitCode(def);

	protected override void WriteInitCode!(CiNamedValue def)
	{
		if (!HasInitCode(def))
			return;
		if (def.Type is CiArrayStorageType array) {
			int nesting = 0;
			while (array.GetElementType() is CiArrayStorageType innerArray) {
				OpenLoop("int", nesting++, array.Length);
				array = innerArray;
			}
			OpenLoop("int", nesting++, array.Length);
			WriteArrayElement(def, nesting);
			Write(" = ");
			assert array.GetElementType() is CiStorageType storage;
			WriteNew(storage, CiPriority.Argument);
			WriteCharLine(';');
			while (--nesting >= 0)
				CloseBlock();
		}
		else
			base.WriteInitCode(def);
	}

	public override void VisitLambdaExpr!(CiLambdaExpr expr)
	{
		WriteName(expr.First);
		Write(" -> ");
		expr.Body.Accept(this, CiPriority.Statement);
	}

	protected override void DefineIsVar!(CiBinaryExpr binary)
	{
	}

	protected override void WriteAssert!(CiAssert statement)
	{
		if (statement.CompletesNormally()) {
			Write("assert ");
			statement.Cond.Accept(this, CiPriority.Argument);
			if (statement.Message != null) {
				Write(" : ");
				statement.Message.Accept(this, CiPriority.Argument);
			}
		}
		else {
			// assert false;
			Write("throw new AssertionError(");
			if (statement.Message != null)
				statement.Message.Accept(this, CiPriority.Argument);
			WriteChar(')');
		}
		WriteCharLine(';');
	}

	public override void VisitForeach!(CiForeach statement)
	{
		Write("for (");
		assert statement.Collection.Type is CiClassType klass;
		switch (klass.Class.Id) {
		case CiId.StringClass:
			Write("int _i = 0; _i < ");
			WriteStringLength(statement.Collection); // FIXME: side effect in every iteration
			Write("; _i++) ");
			OpenBlock();
			WriteTypeAndName(statement.GetVar());
			Write(" = ");
			statement.Collection.Accept(this, CiPriority.Primary); // FIXME: side effect in every iteration
			WriteLine(".charAt(_i);");
			FlattenBlock(statement.Body);
			CloseBlock();
			return;
		case CiId.DictionaryClass:
		case CiId.SortedDictionaryClass:
		case CiId.OrderedDictionaryClass:
			Include("java.util.Map");
			WriteDictType("Map.Entry", klass);
			WriteChar(' ');
			Write(statement.GetVar().Name);
			Write(" : ");
			WritePostfix(statement.Collection, ".entrySet()");
			break;
		default:
			WriteTypeAndName(statement.GetVar());
			Write(" : ");
			statement.Collection.Accept(this, CiPriority.Argument);
			break;
		}
		WriteChar(')');
		WriteChild(statement.Body);
	}

	public override void VisitLock!(CiLock statement)
	{
		Write("synchronized (");
		statement.Lock.Accept(this, CiPriority.Argument);
		WriteChar(')');
		WriteChild(statement.Body);
	}

	protected override void WriteSwitchValue!(CiExpr expr)
	{
		if (IsUnsignedByteIndexing(expr)) {
			assert expr is CiBinaryExpr indexing;
			WriteIndexingInternal(indexing); // omit "& 0xff"
		}
		else
			base.WriteSwitchValue(expr);
	}

	bool WriteSwitchCaseVar!(CiExpr expr)
	{
		expr.Accept(this, CiPriority.Argument);
		if (expr is CiVar def && def.Name == "_") {
			// javac: "as of release 9, '_' is a keyword, and may not be used as an identifier"
			VisitLiteralLong(this.SwitchCaseDiscards++);
			return true;
		}
		return false;
	}

	protected override void WriteSwitchCase!(CiSwitch statement, CiCase kase)
	{
		if (statement.IsTypeMatching()) {
			foreach (CiExpr expr in kase.Values) {
				Write("case ");
				bool discard;
				if (expr is CiBinaryExpr when1) {
					discard = WriteSwitchCaseVar(when1.Left);
					Write(" when ");
					when1.Right.Accept(this, CiPriority.Argument);
				}
				else
					discard = WriteSwitchCaseVar(expr);
				WriteCharLine(':');
				this.Indent++;
				WriteSwitchCaseBody(kase.Body);
				this.Indent--;
				if (discard)
					this.SwitchCaseDiscards--;
			}
		}
		else
			base.WriteSwitchCase(statement, kase);
	}

	public override void VisitThrow!(CiThrow statement)
	{
		Write("throw new Exception(");
		statement.Message.Accept(this, CiPriority.Argument);
		WriteLine(");");
	}

	void CreateJavaFile!(string className)
	{
		CreateFile(this.OutputFile, className + ".java");
		if (this.Namespace.Length != 0) {
			Write("package ");
			Write(this.Namespace);
			WriteCharLine(';');
		}
	}

	public override void VisitEnumValue!(CiConst konst, CiConst? previous)
	{
		WriteDoc(konst.Documentation);
		Write("int ");
		WriteUppercaseWithUnderscores(konst.Name);
		Write(" = ");
		if (konst.Value is CiImplicitEnumValue imp)
			VisitLiteralLong(imp.Value);
		else
			konst.Value.Accept(this, CiPriority.Argument);
		WriteCharLine(';');
	}

	protected override void WriteEnum!(CiEnum enu)
	{
		CreateJavaFile(enu.Name);
		WriteNewLine();
		WriteDoc(enu.Documentation);
		WritePublic(enu);
		Write("interface ");
		WriteLine(enu.Name);
		OpenBlock();
		enu.AcceptValues(this);
		CloseBlock();
		CloseFile();
	}

	void WriteSignature!(CiMethod method, int paramCount)
	{
		WriteNewLine();
		WriteMethodDoc(method);
		WriteVisibility(method.Visibility);
		switch (method.CallType) {
		case CiCallType.Static:
			Write("static ");
			break;
		case CiCallType.Virtual:
			break;
		case CiCallType.Abstract:
			Write("abstract ");
			break;
		case CiCallType.Override:
			Write("@Override ");
			break;
		case CiCallType.Normal:
			if (method.Visibility != CiVisibility.Private)
				Write("final ");
			break;
		case CiCallType.Sealed:
			Write("final @Override ");
			break;
		default:
			assert false;
		}
		WriteTypeAndName(method);
		WriteChar('(');
		CiVar param = method.Parameters.FirstParameter();
		for (int i = 0; i < paramCount; i++) {
			if (i > 0)
				Write(", ");
			WriteTypeAndName(param);
			param = param.NextParameter();
		}
		WriteChar(')');
		if (method.Throws)
			Write(" throws Exception");
	}

	void WriteOverloads!(CiMethod method, int paramCount)
	{
		if (paramCount + 1 < method.Parameters.Count())
			WriteOverloads(method, paramCount + 1);
		WriteSignature(method, paramCount);
		WriteNewLine();
		OpenBlock();
		if (method.Type.Id != CiId.VoidType)
			Write("return ");
		WriteName(method);
		WriteChar('(');
		CiVar param = method.Parameters.FirstParameter();
		for (int i = 0; i < paramCount; i++) {
			WriteName(param);
			Write(", ");
			param = param.NextParameter();
		}
		param.Value.Accept(this, CiPriority.Argument);
		WriteLine(");");
		CloseBlock();
	}

	protected override void WriteConst!(CiConst konst)
	{
		WriteNewLine();
		WriteDoc(konst.Documentation);
		WriteVisibility(konst.Visibility);
		Write("static final ");
		WriteTypeAndName(konst);
		Write(" = ");
		WriteCoercedExpr(konst.Type, konst.Value);
		WriteCharLine(';');
	}

	protected override void WriteField!(CiField field)
	{
		WriteDoc(field.Documentation);
		WriteVisibility(field.Visibility);
		WriteVar(field);
		WriteCharLine(';');
	}

	protected override void WriteMethod!(CiMethod method)
	{
		WriteSignature(method, method.Parameters.Count());
		WriteBody(method);
		int i = 0;
		for (CiVar? param = method.Parameters.FirstParameter(); param != null; param = param.NextParameter()) {
			if (param.Value != null) {
				WriteOverloads(method, i);
				break;
			}
			i++;
		}
	}

	protected override void WriteClass!(CiClass klass, CiProgram program)
	{
		OpenStringWriter();

		WriteDoc(klass.Documentation);
		WritePublic(klass);
		switch (klass.CallType) {
		case CiCallType.Normal:
			break;
		case CiCallType.Abstract:
			Write("abstract ");
			break;
		case CiCallType.Static:
		case CiCallType.Sealed:
			Write("final ");
			break;
		default:
			assert false;
		}
		OpenClass(klass, "", " extends ");

		if (klass.CallType == CiCallType.Static) {
			Write("private ");
			Write(klass.Name);
			WriteLine("()");
			OpenBlock();
			CloseBlock();
		}
		else if (NeedsConstructor(klass)) {
			if (klass.Constructor != null) {
				WriteDoc(klass.Constructor.Documentation);
				WriteVisibility(klass.Constructor.Visibility);
			}
			Write(klass.Name);
			WriteLine("()");
			OpenBlock();
			WriteConstructorBody(klass);
			CloseBlock();
		}

		WriteMembers(klass, true);

		CloseBlock();

		CreateJavaFile(klass.Name);
		WriteTopLevelNatives(program);
		WriteIncludes("import ", ";");
		WriteNewLine();
		CloseStringWriter();
		CloseFile();
	}

	void WriteResources!()
	{
		CreateJavaFile("CiResource");
		WriteLine("import java.io.DataInputStream;");
		WriteLine("import java.io.IOException;");
		WriteNewLine();
		Write("class CiResource");
		WriteNewLine();
		OpenBlock();
		WriteLine("static byte[] getByteArray(String name, int length)");
		OpenBlock();
		Write("DataInputStream dis = new DataInputStream(");
		WriteLine("CiResource.class.getResourceAsStream(name));");
		WriteLine("byte[] result = new byte[length];");
		Write("try ");
		OpenBlock();
		Write("try ");
		OpenBlock();
		WriteLine("dis.readFully(result);");
		CloseBlock();
		Write("finally ");
		OpenBlock();
		WriteLine("dis.close();");
		CloseBlock();
		CloseBlock();
		Write("catch (IOException e) ");
		OpenBlock();
		WriteLine("throw new RuntimeException();");
		CloseBlock();
		WriteLine("return result;");
		CloseBlock();
		CloseBlock();
		CloseFile();
	}

	public override void WriteProgram!(CiProgram program)
	{
		this.SwitchCaseDiscards = 0;
		WriteTypes(program);
		if (program.Resources.Count > 0)
			WriteResources();
	}
}
