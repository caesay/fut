// GenJs.ci - JavaScript code generator
//
// Copyright (C) 2011-2023  Piotr Fusik
//
// This file is part of CiTo, see https://github.com/pfusik/cito
//
// CiTo is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// CiTo is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with CiTo.  If not, see http://www.gnu.org/licenses/

public class GenJsNoModule : GenBase
{
	List<CiSwitch>() SwitchesWithLabel;

	protected override string GetTargetName() => "JavaScript";

	void WriteCamelCaseNotKeyword!(string name)
	{
		WriteCamelCase(name);
		switch (name) {
		case "Constructor":
		case "arguments":
		case "await":
		case "catch":
		case "debugger":
		case "delete":
		case "export":
		case "extends":
		case "finally":
		case "function":
		case "implements":
		case "import":
		case "instanceof":
		case "interface":
		case "let":
		case "package":
		case "private":
		case "super":
		case "try":
		case "typeof":
		case "var":
		case "with":
		case "yield":
			WriteChar('_');
			break;
		default:
			break;
		}
	}

	protected virtual bool IsJsPrivate(CiMember member) => member.Visibility == CiVisibility.Private;

	protected override void WriteName!(CiSymbol symbol)
	{
		switch (symbol) {
		case CiContainerType _:
			Write(symbol.Name);
			break;
		case CiConst konst:
			if (konst.InMethod != null) {
				WriteUppercaseWithUnderscores(konst.InMethod.Name);
				WriteChar('_');
			}
			WriteUppercaseWithUnderscores(symbol.Name);
			break;
		case CiVar _:
			WriteCamelCaseNotKeyword(symbol.Name);
			break;
		case CiMember member:
			if (IsJsPrivate(member)) {
				WriteChar('#');
				WriteCamelCase(symbol.Name);
				if (symbol.Name == "Constructor")
					WriteChar('_');
			}
			else
				WriteCamelCaseNotKeyword(symbol.Name);
			break;
		default:
			assert false;
		}
	}

	protected override void WriteTypeAndName!(CiNamedValue value)
	{
		WriteName(value);
	}

	protected void WriteArrayElementType!(CiType type)
	{
		switch (type.Id) {
		case CiId.SByteRange:
			Write("Int8");
			break;
		case CiId.ByteRange:
			Write("Uint8");
			break;
		case CiId.ShortRange:
			Write("Int16");
			break;
		case CiId.UShortRange:
			Write("Uint16");
			break;
		case CiId.IntType:
			Write("Int32");
			break;
		case CiId.LongType:
			Write("BigInt64");
			break;
		case CiId.FloatType:
			Write("Float32");
			break;
		case CiId.DoubleType:
			Write("Float64");
			break;
		default:
			assert false;
		}
	}

	public override void VisitAggregateInitializer!(CiAggregateInitializer expr)
	{
		assert expr.Type is CiArrayStorageType array;
		bool numeric = false;
		if (array.GetElementType() is CiNumericType number) {
			Write("new ");
			WriteArrayElementType(number);
			Write("Array(");
			numeric = true;
		}
		Write("[ ");
		WriteCoercedLiterals(null, expr.Items);
		Write(" ]");
		if (numeric)
			WriteChar(')');
	}

	protected override void WriteNew!(CiReadWriteClassType klass, CiPriority parent)
	{
		switch (klass.Class.Id) {
		case CiId.ListClass:
		case CiId.QueueClass:
		case CiId.StackClass:
			Write("[]");
			break;
		case CiId.HashSetClass:
		case CiId.SortedSetClass:
			Write("new Set()");
			break;
		case CiId.DictionaryClass:
		case CiId.SortedDictionaryClass:
			Write("{}");
			break;
		case CiId.OrderedDictionaryClass:
			Write("new Map()");
			break;
		case CiId.LockClass:
			NotSupported(klass, "Lock");
			break;
		default:
			Write("new ");
			Write(klass.Class.Name);
			Write("()");
			break;
		}
	}

	protected override void WriteNewWithFields!(CiReadWriteClassType type, CiAggregateInitializer init)
	{
		Write("Object.assign(");
		WriteNew(type, CiPriority.Argument);
		WriteChar(',');
		WriteObjectLiteral(init, ": ");
		WriteChar(')');
	}

	protected override void WriteVar!(CiNamedValue def)
	{
		Write(def.Type.IsFinal() && !def.IsAssignableStorage() ? "const " : "let ");
		base.WriteVar(def);
	}

	void WriteInterpolatedLiteral!(string s)
	{
		int i = 0;
		foreach (int c in s) {
			i++;
			if (c == '`'
			 || (c == '$' && i < s.Length && s[i] == '{'))
				WriteChar('\\');
			WriteChar(c);
		}
	}

	public override void VisitInterpolatedString!(CiInterpolatedString expr, CiPriority parent)
	{
		WriteChar('`');
		foreach (CiInterpolatedPart part in expr.Parts) {
			WriteInterpolatedLiteral(part.Prefix);
			Write("${");
			if (part.Width != 0 || part.Format != ' ') {
				if (part.Argument is CiLiteralLong || part.Argument is CiPrefixExpr) {
					// FIXME: we should rather split CiPriority.Primary into CiPriority.Prefix and CiPriority.Suffix
					WriteChar('(');
					part.Argument.Accept(this, CiPriority.Primary);
					WriteChar(')');
				}
				else
					part.Argument.Accept(this, CiPriority.Primary);
				if (part.Argument.Type is CiNumericType) {
					switch (part.Format) {
					case 'E':
						Write(".toExponential(");
						if (part.Precision >= 0)
							VisitLiteralLong(part.Precision);
						Write(").toUpperCase()");
						break;
					case 'e':
						Write(".toExponential(");
						if (part.Precision >= 0)
							VisitLiteralLong(part.Precision);
						WriteChar(')');
						break;
					case 'F':
					case 'f':
						Write(".toFixed(");
						if (part.Precision >= 0)
							VisitLiteralLong(part.Precision);
						WriteChar(')');
						break;
					case 'X':
						Write(".toString(16).toUpperCase()");
						break;
					case 'x':
						Write(".toString(16)");
						break;
					default:
						Write(".toString()");
						break;
					}
					if (part.Precision >= 0) {
						switch (part.Format) {
						case 'D':
						case 'd':
						case 'X':
						case 'x':
							Write(".padStart(");
							VisitLiteralLong(part.Precision);
							Write(", \"0\")");
							break;
						default:
							break;
						}
					}
				}
				if (part.Width > 0) {
					Write(".padStart(");
					VisitLiteralLong(part.Width);
					WriteChar(')');
				}
				else if (part.Width < 0) {
					Write(".padEnd(");
					VisitLiteralLong(-part.Width);
					WriteChar(')');
				}
			}
			else
				part.Argument.Accept(this, CiPriority.Argument);
			WriteChar('}');
		}
		WriteInterpolatedLiteral(expr.Suffix);
		WriteChar('`');
	}

	protected override void WriteLocalName!(CiSymbol symbol, CiPriority parent)
	{
		if (symbol is CiMember member) {
			if (!member.IsStatic())
				Write("this");
			else if (this.CurrentMethod != null)
				Write(this.CurrentMethod.Parent.Name);
			else if (symbol is CiConst konst) {
				konst.Value.Accept(this, parent);
				return;
			}
			else
				assert false;
			WriteChar('.');
		}
		WriteName(symbol);
		if (symbol.Parent is CiForeach forEach && forEach.Collection.Type is CiStringType)
			Write(".codePointAt(0)");
	}

	protected override void WriteCoercedInternal!(CiType type, CiExpr expr, CiPriority parent)
	{
		if (type is CiNumericType) { // not CiPrintableType
			if (type.Id == CiId.LongType) {
				if (expr is CiLiteralLong) {
					expr.Accept(this, CiPriority.Primary);
					WriteChar('n');
					return;
				}
				if (expr.Type.Id != CiId.LongType) {
					WriteCall("BigInt", expr);
					return;
				}
			}
			else if (expr.Type.Id == CiId.LongType) {
				WriteCall("Number", expr);
				return;
			}
		}
		expr.Accept(this, parent);
	}

	protected override void WriteNewArray!(CiType elementType, CiExpr lengthExpr, CiPriority parent)
	{
		Write("new ");
		if (elementType is CiNumericType)
			WriteArrayElementType(elementType);
		WriteCall("Array", lengthExpr);
	}

	protected override bool HasInitCode(CiNamedValue def) => def.Type is CiArrayStorageType array && array.GetElementType() is CiStorageType;

	protected override void WriteInitCode!(CiNamedValue def)
	{
		if (!HasInitCode(def))
			return;
		assert def.Type is CiArrayStorageType array;
		int nesting = 0;
		while (array.GetElementType() is CiArrayStorageType innerArray) {
			OpenLoop("let", nesting++, array.Length);
			WriteArrayElement(def, nesting);
			Write(" = ");
			WriteNewArray(innerArray.GetElementType(), innerArray.LengthExpr, CiPriority.Argument);
			WriteCharLine(';');
			array = innerArray;
		}
		if (array.GetElementType() is CiStorageType klass) {
			OpenLoop("let", nesting++, array.Length);
			WriteArrayElement(def, nesting);
			Write(" = ");
			WriteNew(klass, CiPriority.Argument);
			WriteCharLine(';');
		}
		while (--nesting >= 0)
			CloseBlock();
	}

	protected override void WriteResource!(string name, int length)
	{
		Write("Ci.");
		WriteResourceName(name);
	}

	public override void VisitSymbolReference!(CiSymbolReference expr, CiPriority parent)
	{
		switch (expr.Symbol.Id) {
		case CiId.ConsoleError:
			Write("process.stderr");
			break;
		case CiId.ListCount:
		case CiId.QueueCount:
		case CiId.StackCount:
			WritePostfix(expr.Left, ".length");
			break;
		case CiId.HashSetCount:
		case CiId.SortedSetCount:
		case CiId.OrderedDictionaryCount:
			WritePostfix(expr.Left, ".size");
			break;
		case CiId.DictionaryCount:
		case CiId.SortedDictionaryCount:
			WriteCall("Object.keys", expr.Left);
			Write(".length");
			break;
		case CiId.MatchStart:
			WritePostfix(expr.Left, ".index");
			break;
		case CiId.MatchEnd:
			if (parent > CiPriority.Add)
				WriteChar('(');
			WritePostfix(expr.Left, ".index + ");
			WritePostfix(expr.Left, "[0].length"); // FIXME: side effect
			if (parent > CiPriority.Add)
				WriteChar(')');
			break;
		case CiId.MatchLength:
			WritePostfix(expr.Left, "[0].length");
			break;
		case CiId.MatchValue:
			WritePostfix(expr.Left, "[0]");
			break;
		case CiId.MathNaN:
			Write("NaN");
			break;
		case CiId.MathNegativeInfinity:
			Write("-Infinity");
			break;
		case CiId.MathPositiveInfinity:
			Write("Infinity");
			break;
		default:
			base.VisitSymbolReference(expr, parent);
			break;
		}
	}

	protected override void WriteStringLength!(CiExpr expr)
	{
		WritePostfix(expr, ".length");
	}

	protected override void WriteCharAt!(CiBinaryExpr expr)
	{
		WriteMethodCall(expr.Left, "charCodeAt", expr.Right);
	}

	protected override void WriteBinaryOperand!(CiExpr expr, CiPriority parent, CiBinaryExpr binary)
	{
		WriteCoerced(binary.Type, expr, parent);
	}

	static bool IsIdentifier(string s)
	{
		if (s.Length == 0 || s[0] < 'A')
			return false;
		foreach (int c in s) {
			if (!CiLexer.IsLetterOrDigit(c))
				return false;
		}
		return true;
	}

	void WriteNewRegex!(List<CiExpr#> args, int argIndex)
	{
		CiExpr pattern = args[argIndex];
		if (pattern is CiLiteralString literal) {
			WriteChar('/');
			bool escaped = false;
			foreach (int c in literal.Value) {
				switch (c) {
				case '\\':
					if (!escaped) {
						escaped = true;
						continue;
					}
					escaped = false;
					break;
				case '"':
				case '\'':
					escaped = false;
					break;
				case '/':
					escaped = true;
					break;
				default:
					break;
				}
				if (escaped) {
					WriteChar('\\');
					escaped = false;
				}
				WriteChar(c);
			}
			WriteChar('/');
			WriteRegexOptions(args, "", "", "", "i", "m", "s");
		}
		else {
			Write("new RegExp(");
			pattern.Accept(this, CiPriority.Argument);
			WriteRegexOptions(args, ", \"", "", "\"", "i", "m", "s");
			WriteChar(')');
		}
	}

	static bool HasLong(List<CiExpr#> args) => args.Any(arg => arg.Type.Id == CiId.LongType);

	void WriteMathMaxMin!(CiMethod method, string name, int op, List<CiExpr#> args)
	{
		if (HasLong(args)) {
			Write("((x, y) => x ");
			WriteChar(op);
			Write(" y ? x : y)");
			WriteArgsInParentheses(method, args);
		}
		else
			WriteCall(name, args[0], args[1]);
	}

	protected override void WriteCallExpr!(CiExpr? obj, CiMethod method, List<CiExpr#> args, CiPriority parent)
	{
		switch (method.Id) {
		case CiId.None:
		case CiId.ClassToString:
		case CiId.StringEndsWith:
		case CiId.StringIndexOf:
		case CiId.StringLastIndexOf:
		case CiId.StringStartsWith:
		case CiId.ArraySortAll:
		case CiId.ListIndexOf:
		case CiId.StackPush:
		case CiId.StackPop:
		case CiId.HashSetAdd:
		case CiId.HashSetClear:
		case CiId.SortedSetAdd:
		case CiId.SortedSetClear:
		case CiId.OrderedDictionaryClear:
		case CiId.MathMethod:
		case CiId.MathLog2:
		case CiId.MathMaxDouble:
		case CiId.MathMinDouble:
		case CiId.MathRound:
			if (obj == null)
				WriteLocalName(method, CiPriority.Primary);
			else {
				if (IsReferenceTo(obj, CiId.BasePtr))
					Write("super");
				else
					obj.Accept(this, CiPriority.Primary);
				WriteChar('.');
				WriteName(method);
			}
			WriteArgsInParentheses(method, args);
			break;
		case CiId.EnumHasFlag:
			WriteEnumHasFlag(obj, args, parent);
			break;
		case CiId.IntTryParse:
			Write("!isNaN(");
			obj.Accept(this, CiPriority.Assign);
			Write(" = parseInt(");
			args[0].Accept(this, CiPriority.Argument);
			WriteTryParseRadix(args);
			Write("))");
			break;
		case CiId.LongTryParse:
			if (args.Count != 1)
				NotSupported(args[1], "Radix");
			Write("(() => { try { ");
			obj.Accept(this, CiPriority.Assign);
			Write("  = BigInt(");
			args[0].Accept(this, CiPriority.Argument);
			Write("); return true; } catch { return false; }})()");
			break;
		case CiId.DoubleTryParse:
			Write("!isNaN(");
			obj.Accept(this, CiPriority.Assign);
			Write(" = parseFloat("); // ignores trailing invalid characters; Number() does not, but it accepts empty string and bin/oct/hex
			args[0].Accept(this, CiPriority.Argument);
			Write("))");
			break;
		case CiId.StringContains:
		case CiId.ListContains:
			WriteMethodCall(obj, "includes", args[0]);
			break;
		case CiId.StringReplace:
			WriteMethodCall(obj, "replaceAll", args[0], args[1]);
			break;
		case CiId.StringSubstring:
			WritePostfix(obj, ".substring(");
			args[0].Accept(this, CiPriority.Argument);
			if (args.Count == 2) {
				Write(", ");
				WriteAdd(args[0], args[1]); // FIXME: side effect
			}
			WriteChar(')');
			break;
		case CiId.ArrayFillAll:
		case CiId.ArrayFillPart:
			WritePostfix(obj, ".fill(");
			args[0].Accept(this, CiPriority.Argument);
			if (args.Count == 3) {
				Write(", ");
				WriteStartEnd(args[1], args[2]);
			}
			WriteChar(')');
			break;
		case CiId.ArrayCopyTo:
		case CiId.ListCopyTo:
			args[1].Accept(this, CiPriority.Primary);
			bool wholeSource = obj.Type is CiArrayStorageType sourceStorage && args[0].IsLiteralZero()
				&& args[3] is CiLiteralLong literalLength && literalLength.Value == sourceStorage.Length;
			if (obj.Type.AsClassType().GetElementType() is CiNumericType) {
				Write(".set(");
				if (wholeSource)
					obj.Accept(this, CiPriority.Argument);
				else {
					WritePostfix(obj, method.Id == CiId.ArrayCopyTo ? ".subarray(" : ".slice(");
					WriteStartEnd(args[0], args[3]);
					WriteChar(')');
				}
				if (!args[2].IsLiteralZero()) {
					Write(", ");
					args[2].Accept(this, CiPriority.Argument);
				}
			}
			else {
				Write(".splice(");
				args[2].Accept(this, CiPriority.Argument);
				Write(", ");
				args[3].Accept(this, CiPriority.Argument);
				Write(", ...");
				obj.Accept(this, CiPriority.Primary);
				if (!wholeSource) {
					Write(".slice(");
					WriteStartEnd(args[0], args[3]);
					WriteChar(')');
				}
			}
			WriteChar(')');
			break;
		case CiId.ArraySortPart:
			WritePostfix(obj, ".subarray(");
			WriteStartEnd(args[0], args[1]);
			Write(").sort()");
			break;
		case CiId.ListAdd:
			WriteListAdd(obj, "push", args);
			break;
		case CiId.ListAddRange:
			WritePostfix(obj, ".push(...");
			args[0].Accept(this, CiPriority.Argument);
			WriteChar(')');
			break;
		case CiId.ListAll:
			WriteMethodCall(obj, "every", args[0]);
			break;
		case CiId.ListAny:
			WriteMethodCall(obj, "some", args[0]);
			break;
		case CiId.ListClear:
		case CiId.QueueClear:
		case CiId.StackClear:
			WritePostfix(obj, ".length = 0");
			break;
		case CiId.ListInsert:
			WriteListInsert(obj, "splice", args, ", 0, ");
			break;
		case CiId.ListLast:
		case CiId.StackPeek:
			WritePostfix(obj, ".at(-1)");
			break;
		case CiId.ListRemoveAt:
			WritePostfix(obj, ".splice(");
			args[0].Accept(this, CiPriority.Argument);
			Write(", 1)");
			break;
		case CiId.ListRemoveRange:
			WriteMethodCall(obj, "splice", args[0], args[1]);
			break;
		case CiId.ListSortAll:
			WritePostfix(obj, ".sort((a, b) => a - b)");
			break;
		case CiId.ListSortPart:
			WritePostfix(obj, ".splice(");
			args[0].Accept(this, CiPriority.Argument);
			Write(", ");
			args[1].Accept(this, CiPriority.Argument);
			Write(", ...");
			WritePostfix(obj, ".slice(");
			WriteStartEnd(args[0], args[1]); // FIXME: side effect
			Write(").sort((a, b) => a - b))");
			break;
		case CiId.QueueDequeue:
			WritePostfix(obj, ".shift()");
			break;
		case CiId.QueueEnqueue:
			WriteMethodCall(obj, "push", args[0]);
			break;
		case CiId.QueuePeek:
			WritePostfix(obj, "[0]");
			break;
		case CiId.HashSetContains:
		case CiId.SortedSetContains:
		case CiId.OrderedDictionaryContainsKey:
			WriteMethodCall(obj, "has", args[0]);
			break;
		case CiId.HashSetRemove:
		case CiId.SortedSetRemove:
		case CiId.OrderedDictionaryRemove:
			WriteMethodCall(obj, "delete", args[0]);
			break;
		case CiId.DictionaryAdd:
			WriteDictionaryAdd(obj, args);
			break;
		case CiId.DictionaryClear:
		case CiId.SortedDictionaryClear:
			Write("for (const key in ");
			obj.Accept(this, CiPriority.Argument);
			WriteCharLine(')');
			Write("\tdelete ");
			WritePostfix(obj, "[key];"); // FIXME: side effect
			break;
		case CiId.DictionaryContainsKey:
		case CiId.SortedDictionaryContainsKey:
			WriteMethodCall(obj, "hasOwnProperty", args[0]);
			break;
		case CiId.DictionaryRemove:
		case CiId.SortedDictionaryRemove:
			Write("delete ");
			WriteIndexing(obj, args[0]);
			break;
		case CiId.TextWriterWrite:
			WritePostfix(obj, ".write(");
			if (args[0].Type is CiStringType)
				args[0].Accept(this, CiPriority.Argument);
			else
				WriteCall("String", args[0]);
			WriteChar(')');
			break;
		case CiId.TextWriterWriteChar:
			WriteMethodCall(obj, "write(String.fromCharCode", args[0]);
			WriteChar(')');
			break;
		case CiId.TextWriterWriteLine:
			if (IsReferenceTo(obj, CiId.ConsoleError)) {
				Write("console.error(");
				if (args.Count == 0)
					Write("\"\"");
				else
					args[0].Accept(this, CiPriority.Argument);
				WriteChar(')');
			}
			else {
				WritePostfix(obj, ".write(");
				if (args.Count != 0) {
					// TODO: coalesce string literals
					args[0].Accept(this, CiPriority.Add);
					Write(" + ");
				}
				Write("\"\\n\")");
			}
			break;
		case CiId.ConsoleWrite:
			Write("process.stdout.write(");
			if (args[0].Type is CiStringType)
				args[0].Accept(this, CiPriority.Argument);
			else
				WriteCall("String", args[0]);
			WriteChar(')');
			break;
		case CiId.ConsoleWriteLine:
			Write("console.log(");
			if (args.Count == 0)
				Write("\"\"");
			else
				args[0].Accept(this, CiPriority.Argument);
			WriteChar(')');
			break;
		case CiId.UTF8GetByteCount:
			Write("new TextEncoder().encode(");
			args[0].Accept(this, CiPriority.Argument);
			Write(").length");
			break;
		case CiId.UTF8GetBytes:
			Write("new TextEncoder().encodeInto(");
			args[0].Accept(this, CiPriority.Argument);
			Write(", ");
			if (args[2].IsLiteralZero())
				args[1].Accept(this, CiPriority.Argument);
			else
				WriteMethodCall(args[1], "subarray", args[2]);
			WriteChar(')');
			break;
		case CiId.UTF8GetString:
			Write("new TextDecoder().decode(");
			WritePostfix(args[0], ".subarray(");
			args[1].Accept(this, CiPriority.Argument);
			Write(", ");
			WriteAdd(args[1], args[2]); // FIXME: side effect
			Write("))");
			break;
		case CiId.EnvironmentGetEnvironmentVariable:
			if (args[0] is CiLiteralString literal && IsIdentifier(literal.Value)) {
				Write("process.env.");
				Write(literal.Value);
			}
			else {
				Write("process.env[");
				args[0].Accept(this, CiPriority.Argument);
				WriteChar(']');
			}
			break;
		case CiId.RegexCompile:
			WriteNewRegex(args, 0);
			break;
		case CiId.RegexEscape:
			WritePostfix(args[0], ".replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&')");
			break;
		case CiId.RegexIsMatchStr:
			WriteNewRegex(args, 1);
			WriteCall(".test", args[0]);
			break;
		case CiId.RegexIsMatchRegex:
			WriteMethodCall(obj, "test", args[0]);
			break;
		case CiId.MatchFindStr:
		case CiId.MatchFindRegex:
			if (parent > CiPriority.Equality)
				WriteChar('(');
			WriteChar('(');
			obj.Accept(this, CiPriority.Assign);
			Write(" = ");
			if (method.Id == CiId.MatchFindStr)
				WriteNewRegex(args, 1);
			else
				args[1].Accept(this, CiPriority.Primary);
			WriteCall(".exec", args[0]);
			Write(") != null");
			if (parent > CiPriority.Equality)
				WriteChar(')');
			break;
		case CiId.MatchGetCapture:
			WriteIndexing(obj, args[0]);
			break;
		case CiId.MathAbs:
			WriteCall(args[0].Type.Id == CiId.LongType ? "(x => x < 0n ? -x : x)" : "Math.abs", args[0]);
			break;
		case CiId.MathCeiling:
			WriteCall("Math.ceil", args[0]);
			break;
		case CiId.MathClamp:
			if (method.Type.Id == CiId.IntType && HasLong(args)) {
				Write("((x, min, max) => x < min ? min : x > max ? max : x)");
				WriteArgsInParentheses(method, args);
			}
			else {
				Write("Math.min(Math.max(");
				WriteClampAsMinMax(args);
			}
			break;
		case CiId.MathFusedMultiplyAdd:
			if (parent > CiPriority.Add)
				WriteChar('(');
			args[0].Accept(this, CiPriority.Mul);
			Write(" * ");
			args[1].Accept(this, CiPriority.Mul);
			Write(" + ");
			args[2].Accept(this, CiPriority.Add);
			if (parent > CiPriority.Add)
				WriteChar(')');
			break;
		case CiId.MathIsFinite:
		case CiId.MathIsNaN:
			WriteCamelCase(method.Name);
			WriteArgsInParentheses(method, args);
			break;
		case CiId.MathIsInfinity:
			if (parent > CiPriority.Equality)
				WriteChar('(');
			WriteCall("Math.abs", args[0]);
			Write(" == Infinity");
			if (parent > CiPriority.Equality)
				WriteChar(')');
			break;
		case CiId.MathMaxInt:
			WriteMathMaxMin(method, "Math.max", '>', args);
			break;
		case CiId.MathMinInt:
			WriteMathMaxMin(method, "Math.min", '<', args);
			break;
		case CiId.MathTruncate:
			WriteCall("Math.trunc", args[0]);
			break;
		default:
			NotSupported(obj, method.Name);
			break;
		}
	}

	protected override void WriteIndexingExpr!(CiBinaryExpr expr, CiPriority parent)
	{
		if (expr.Left.Type is CiClassType dict && dict.Class.Id == CiId.OrderedDictionaryClass)
			WriteMethodCall(expr.Left, "get", expr.Right);
		else
			base.WriteIndexingExpr(expr, parent);
	}

	protected override void WriteAssign!(CiBinaryExpr expr, CiPriority parent)
	{
		if (expr.Left is CiBinaryExpr indexing
		 && indexing.Op == CiToken.LeftBracket
		 && indexing.Left.Type is CiClassType dict
		 && dict.Class.Id == CiId.OrderedDictionaryClass)
			WriteMethodCall(indexing.Left, "set", indexing.Right, expr.Right);
		else
			base.WriteAssign(expr, parent);
	}

	protected override string GetIsOperator() => " instanceof ";

	protected virtual void WriteBoolAndOr!(CiBinaryExpr expr)
	{
		Write("!!");
		base.VisitBinaryExpr(expr, CiPriority.Primary);
	}

	void WriteBoolAndOrAssign!(CiBinaryExpr expr, CiPriority parent)
	{
		expr.Right.Accept(this, parent);
		WriteCharLine(')');
		WriteChar('\t');
		expr.Left.Accept(this, CiPriority.Assign);
	}

	void WriteIsVar!(CiExpr expr, CiVar def, bool assign, CiPriority parent)
	{
		if (parent > CiPriority.Rel)
			WriteChar('(');
		if (assign) {
			WriteChar('(');
			WriteCamelCaseNotKeyword(def.Name);
			Write(" = ");
			expr.Accept(this, CiPriority.Argument);
			WriteChar(')');
		}
		else
			expr.Accept(this, CiPriority.Rel);
		Write(" instanceof ");
		Write(def.Type.Name);
		if (parent > CiPriority.Rel)
			WriteChar(')');
	}

	public override void VisitBinaryExpr!(CiBinaryExpr expr, CiPriority parent)
	{
		switch (expr.Op) {
		case CiToken.Slash when expr.Type is CiIntegerType && expr.Type.Id != CiId.LongType:
			if (parent > CiPriority.Or)
				WriteChar('(');
			expr.Left.Accept(this, CiPriority.Mul);
			Write(" / ");
			expr.Right.Accept(this, CiPriority.Primary);
			Write(" | 0");
			if (parent > CiPriority.Or)
				WriteChar(')');
			break;
		case CiToken.DivAssign when expr.Type is CiIntegerType && expr.Type.Id != CiId.LongType:
			if (parent > CiPriority.Assign)
				WriteChar('(');
			expr.Left.Accept(this, CiPriority.Assign);
			Write(" = ");
			expr.Left.Accept(this, CiPriority.Mul); // FIXME: side effect
			Write(" / ");
			expr.Right.Accept(this, CiPriority.Primary);
			Write(" | 0");
			if (parent > CiPriority.Assign)
				WriteChar(')');
			break;
		case CiToken.And when expr.Type.Id == CiId.BoolType:
		case CiToken.Or when expr.Type.Id == CiId.BoolType:
			WriteBoolAndOr(expr);
			break;
		case CiToken.Xor when expr.Type.Id == CiId.BoolType:
			WriteEqual(expr.Left, expr.Right, parent, true);
			break;
		case CiToken.AndAssign when expr.Type.Id == CiId.BoolType:
			Write("if (!"); // FIXME: picks up parent "else"
			WriteBoolAndOrAssign(expr, CiPriority.Primary);
			Write(" = false");
			break;
		case CiToken.OrAssign when expr.Type.Id == CiId.BoolType:
			Write("if ("); // FIXME: picks up parent "else"
			WriteBoolAndOrAssign(expr, CiPriority.Argument);
			Write(" = true");
			break;
		case CiToken.XorAssign when expr.Type.Id == CiId.BoolType:
			expr.Left.Accept(this, CiPriority.Assign);
			Write(" = ");
			WriteEqual(expr.Left, expr.Right, CiPriority.Argument, true); // FIXME: side effect
			break;
		case CiToken.Is when expr.Right is CiVar def:
			WriteIsVar(expr.Left, def, true, parent);
			break;
		default:
			base.VisitBinaryExpr(expr, parent);
			break;
		}
	}

	public override void VisitLambdaExpr!(CiLambdaExpr expr)
	{
		WriteName(expr.First);
		Write(" => ");
		expr.Body.Accept(this, CiPriority.Statement);
	}

	protected override void StartTemporaryVar!(CiType type)
	{
		assert false;
	}

	protected override void DefineObjectLiteralTemporary!(CiUnaryExpr expr)
	{
	}

	protected virtual void WriteAsType!(CiVar def)
	{
	}

	void WriteVarCast!(CiVar def, CiExpr value)
	{
		Write("const ");
		WriteCamelCaseNotKeyword(def.Name);
		Write(" = ");
		value.Accept(this, CiPriority.Argument);
		WriteAsType(def);
		WriteCharLine(';');
	}

	protected override void WriteAssertCast!(CiBinaryExpr expr)
	{
		assert expr.Right is CiVar def;
		WriteVarCast(def, expr.Left);
	}

	protected override void WriteAssert!(CiAssert statement)
	{
		if (statement.CompletesNormally()) {
			Write("console.assert(");
			statement.Cond.Accept(this, CiPriority.Argument);
			if (statement.Message != null) {
				Write(", ");
				statement.Message.Accept(this, CiPriority.Argument);
			}
		}
		else {
			Write("throw new Error(");
			if (statement.Message != null)
				statement.Message.Accept(this, CiPriority.Argument);
		}
		WriteLine(");");
	}

	public override void VisitBreak!(CiBreak statement)
	{
		if (statement.LoopOrSwitch is CiSwitch switchStatement) {
			int label = this.SwitchesWithLabel.IndexOf(switchStatement);
			if (label >= 0) {
				Write("break ciswitch");
				VisitLiteralLong(label);
				WriteCharLine(';');
				return;
			}
		}
		base.VisitBreak(statement);
	}

	public override void VisitForeach!(CiForeach statement)
	{
		Write("for (const ");
		assert statement.Collection.Type is CiClassType klass;
		switch (klass.Class.Id) {
		case CiId.StringClass:
		case CiId.ArrayStorageClass:
		case CiId.ListClass:
		case CiId.HashSetClass:
			WriteName(statement.GetVar());
			Write(" of ");
			statement.Collection.Accept(this, CiPriority.Argument);
			break;
		case CiId.SortedSetClass:
			WriteName(statement.GetVar());
			Write(" of Array.from(");
			statement.Collection.Accept(this, CiPriority.Argument);
			Write(").sort(");
			if (klass.GetElementType() is CiNumericType)
				Write("(a, b) => a - b");
			WriteChar(')');
			break;
		case CiId.DictionaryClass:
		case CiId.SortedDictionaryClass:
		case CiId.OrderedDictionaryClass:
			WriteChar('[');
			WriteName(statement.GetVar());
			Write(", ");
			WriteName(statement.GetValueVar());
			Write("] of ");
			if (klass.Class.Id == CiId.OrderedDictionaryClass)
				statement.Collection.Accept(this, CiPriority.Argument);
			else {
				WriteCall("Object.entries", statement.Collection);
				switch (statement.GetVar().Type) {
				case CiStringType _:
					if (klass.Class.Id == CiId.SortedDictionaryClass)
						Write(".sort((a, b) => a[0].localeCompare(b[0]))");
					break;
				case CiNumericType _:
					Write(".map(e => [+e[0], e[1]])");
					if (klass.Class.Id == CiId.SortedDictionaryClass)
						Write(".sort((a, b) => a[0] - b[0])");
					break;
				default:
					assert false;
				}
			}
			break;
		default:
			assert false;
		}
		WriteChar(')');
		WriteChild(statement.Body);
	}

	public override void VisitLock!(CiLock statement)
	{
		NotSupported(statement, "'lock'");
	}

	void WriteTypeMatchingSwitch!(CiSwitch statement)
	{
		WriteSwitchWhenVars(statement);
		string op = "if (";
		foreach (CiCase kase in statement.Cases) {
			CiVar? caseVar = null;
			foreach (CiExpr value in kase.Values) {
				Write(op);
				switch (value) {
				case CiVar def:
					WriteIsVar(statement.Value, def, false, CiPriority.CondOr); // FIXME: side effect in every if
					if (def.Name != "_")
						caseVar = def;
					break;
				case CiLiteralNull _:
					statement.Value.Accept(this, CiPriority.Equality); // FIXME: side effect in every if
					Write(" == null");
					break;
				case CiBinaryExpr when1 when when1.Op == CiToken.When:
					assert when1.Left is CiVar whenVar;
					WriteIsVar(statement.Value, whenVar, whenVar.Name != "_", CiPriority.CondAnd); // FIXME: side effect in every if
					Write(" && ");
					when1.Right.Accept(this, CiPriority.CondAnd);
					break;
				default:
					assert false;
				}
				op = " || ";
			}
			Write(") ");
			OpenBlock();
			if (caseVar != null)
				WriteVarCast(caseVar, statement.Value); // FIXME: side effect
			WriteFirstStatements(kase.Body, CiSwitch.LengthWithoutTrailingBreak(kase.Body));
			CloseBlock();
			op = "else if (";
		}
		if (statement.HasDefault()) {
			Write("else ");
			OpenBlock();
			WriteFirstStatements(statement.DefaultBody, CiSwitch.LengthWithoutTrailingBreak(statement.DefaultBody));
			CloseBlock();
		}
	}

	public override void VisitSwitch!(CiSwitch statement)
	{
		if (statement.IsTypeMatching()) {
			if (statement.Cases.Any(kase => CiSwitch.HasEarlyBreak(kase.Body))
			 || CiSwitch.HasEarlyBreak(statement.DefaultBody)) {
				Write("ciswitch");
				VisitLiteralLong(this.SwitchesWithLabel.Count);
				this.SwitchesWithLabel.Add(statement);
				Write(": ");
				OpenBlock();
				WriteTypeMatchingSwitch(statement);
				CloseBlock();
			}
			else
				WriteTypeMatchingSwitch(statement);
		}
		else
			base.VisitSwitch(statement);
	}

	public override void VisitThrow!(CiThrow statement)
	{
		Write("throw ");
		statement.Message.Accept(this, CiPriority.Argument);
		WriteCharLine(';');
	}

	protected virtual void StartContainerType!(CiContainerType container)
	{
		WriteNewLine();
		WriteDoc(container.Documentation);
	}

	public override void VisitEnumValue!(CiConst konst, CiConst? previous)
	{
		if (previous != null)
			WriteCharLine(',');
		WriteDoc(konst.Documentation);
		WriteUppercaseWithUnderscores(konst.Name);
		Write(" : ");
		VisitLiteralLong(konst.Value.IntValue());
	}

	protected override void WriteEnum!(CiEnum enu)
	{
		StartContainerType(enu);
		Write("const ");
		Write(enu.Name);
		Write(" = ");
		OpenBlock();
		enu.AcceptValues(this);
		WriteNewLine();
		CloseBlock();
	}

	protected override void WriteConst!(CiConst konst)
	{
		if (konst.Visibility != CiVisibility.Private || konst.Type is CiArrayStorageType) {
			WriteNewLine();
			WriteDoc(konst.Documentation);
			Write("static ");
			WriteName(konst);
			Write(" = ");
			konst.Value.Accept(this, CiPriority.Argument);
			WriteCharLine(';');
		}
	}

	protected override void WriteField!(CiField field)
	{
		WriteDoc(field.Documentation);
		base.WriteVar(field);
		WriteCharLine(';');
	}

	protected override void WriteMethod!(CiMethod method)
	{
		if (method.CallType == CiCallType.Abstract)
			return;
		this.SwitchesWithLabel.Clear();
		WriteNewLine();
		WriteMethodDoc(method);
		if (method.CallType == CiCallType.Static)
			Write("static ");
		WriteName(method);
		WriteParameters(method, true);
		WriteBody(method);
	}

	protected void WriteConstructor!(CiClass klass)
	{
		this.SwitchesWithLabel.Clear();
		WriteLine("constructor()");
		OpenBlock();
		if (klass.Parent is CiClass)
			WriteLine("super();");
		WriteConstructorBody(klass);
		CloseBlock();
	}

	protected override void WriteClass!(CiClass klass, CiProgram program)
	{
		if (!WriteBaseClass(klass, program))
			return;
		StartContainerType(klass);
		OpenClass(klass, "", " extends ");
		if (NeedsConstructor(klass)) {
			if (klass.Constructor != null)
				WriteDoc(klass.Constructor.Documentation);
			WriteConstructor(klass);
		}
		WriteMembers(klass, true);
		CloseBlock();
	}

	protected void WriteLib!(SortedDictionary<string(), List<byte>()> resources)
	{
		if (resources.Count == 0)
			return;
		WriteNewLine();
		WriteLine("class Ci");
		OpenBlock();
		foreach ((string name, List<byte> content) in resources) {
			Write("static ");
			WriteResourceName(name);
			WriteLine(" = new Uint8Array([");
			WriteChar('\t');
			WriteBytes(content);
			WriteLine(" ]);");
		}
		WriteNewLine();
		CloseBlock();
	}

	protected virtual void WriteUseStrict!()
	{
		WriteNewLine();
		WriteLine("\"use strict\";");
	}

	public override void WriteProgram!(CiProgram program)
	{
		CreateOutputFile();
		WriteTopLevelNatives(program);
		WriteTypes(program);
		WriteLib(program.Resources);
		CloseFile();
	}
}

public class GenJs : GenJsNoModule
{
	protected override void StartContainerType!(CiContainerType container)
	{
		base.StartContainerType(container);
		if (container.IsPublic)
			Write("export ");
	}

	protected override void WriteUseStrict!()
	{
	}
}
